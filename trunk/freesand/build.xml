<?xml version = "1.0"?>

<!--
FreeSand is a pure java implementation of a cellular automata
simulation inspired by falling sand like games.

Copyright (C) 2007 Robert B. Harris (freesand@trebor.org)
   
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301, USA.
-->

<project name = "FreeSand" 
         default = "compile" 
         basedir = ".">

  <!-- build variables -->

  <property name = "app-name"           value = "freesand"/>
  <property name = "app-title"          value = "FreeSand"/>
  <property name = "domain"             value = "trebor.org"/>
  <property name = "domain-scope"       value = "org.trebor"/>
  <property name = "domain-scope-dir"   value = "org/trebor"/>
  <property name = "source-dir"         value = "src"/>
  <property name = "doc-dir"            value = "doc"/>
  <property name = "build-dir"          value = "build"/>
  <property name = "resources"          value = "resources"/>
  <property name = "icons"              value = "${resources}/icons"/>
  <property name = "samples"            value = "${resources}/samples"/>
  <property name = "jar-name"           value = "${app-name}.jar"/>
  <property name = "app-dir"            value = "${app-title}.app"/>
  <property name = "dmg-dir"            value = "disk-image"/>
  <property name = "dmg-name"           value = "freesand.dmg"/>
  <property name = "dmg-vol-name"       value = "FreeSand"/>
  <property name = "zip-dir"            value = "zip-image"/>
  <property name = "zip-name"           value = "freesand.zip"/>
  <property name = "build-env-dmg"      value = "freesand-build.dmg"/>
  <property name = "build-env-zip"      value = "freesand-build.zip"/>
  <property name = "build-env-dir"  value = "build-env-image"/>
  <property name = "build-env-vol-name" value = "FreeSandEnvironment"/>
  <property name = "java-framework-mac"
            value = "/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS"/>

  <!-- remove all built files -->
     
  <target name = "clean" 
          description = "remove all generated files">
    <delete dir = "${build-dir}"/>
    <delete dir = "${doc-dir}"/>
    <delete dir = "${app-dir}"/>
    <delete dir = "${dmg-dir}"/>
    <delete dir = "${zip-dir}"/>
    <delete dir = "${build-env-dir}"/>
    <delete file = "${jar-name}"/>
    <delete file = "${dmg-name}"/>
    <delete file = "${zip-name}"/>
    <delete file = "${build-env-dmg}"/>
    <delete file = "${build-env-zip}"/>
  </target>

  <!-- compile java doc -->

  <target name = "doc" 
          description = "compile java documentation">
    <javadoc
        packagenames = "{domain-scope}.${app-name}.*"
        sourcepath   = "${source-dir}"
        destdir      = "${doc-dir}">
    </javadoc>
  </target>

  <!-- initialize the build -->

  <target name = "init" 
          description = "initialize the build enviroment">
    <mkdir dir = "${build-dir}"/>
  </target>

  <!-- compile project -->
  
  <target name = "compile" 
          depends = "init" 
          description = "compile java files">
    <javac srcdir = "${source-dir}"
           destdir = "${build-dir}" 
           debug = "true">
      <compilerarg value = "-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- run project -->

  <target name = "run" 
          depends = "compile" 
          description = "execute project code">
    <java classpath = "${build-dir}"
          classname = "${domain-scope}.${app-name}.Game"
          fork = "true">
      <arg value = "-Xdoc:name=${app-title}"/>
    </java>
  </target>
  
  <!-- construct jar -->

  <target name = "jar" depends = "compile" description = "construct jar package">
    <jar destfile = "${jar-name}"
         update   = "false"
         basedir  = "${build-dir}"
         includes = "${domain-scope-dir}/${app-name}/*"
         manifest = "${resources}/MANIFEST.MF"/>
    <jar destfile = "${jar-name}"
         update   = "true"
         basedir  = "${source-dir}"
         includes = "${domain-scope-dir}/${app-name}/*"/>
    <jar destfile = "${jar-name}"
         update   = "true"
         basedir  = "resources"
         includes = "gpl.txt"/>
  </target>

  <!-- construct mac .app -->

  <target name = "app" 
          depends = "jar" 
          description = "construct os x application (mac only)">

    <!-- build directory structure -->

    <mkdir dir = "${app-dir}"/>
    <mkdir dir = "${app-dir}/Contents"/>
    <mkdir dir = "${app-dir}/Contents/MacOS"/>
    <mkdir dir = "${app-dir}/Contents/Resources"/>
    <mkdir dir = "${app-dir}/Contents/Resources/Java"/>

    <!-- assemble files -->

    <copy file = "${java-framework-mac}/JavaApplicationStub"
          todir = "${app-dir}/Contents/MacOS"/>
    <exec executable = "chmod">
      <arg value = "755"/>
      <arg value = "${app-dir}/Contents/MacOS/JavaApplicationStub"/>
    </exec>
    <copy file = "${resources}/Info.plist"
          todir = "${app-dir}/Contents"/>
    <copy file = "${jar-name}"
          todir = "${app-dir}/Contents/Resources/Java"/>
    <copy file = "${icons}/${app-title}Icon.icns" 
          tofile = "${app-dir}/Icon&#13;"/>
    <copy file = "${icons}/${app-title}Icon.icns"
          todir = "${app-dir}/Contents/Resources"/>

    <!-- identify this as an application bundle (B) with an icon (C) -->

    <exec executable = "/Developer/Tools/SetFile">
      <arg value = "-a"/>
      <arg value = "BC"/>
      <arg value = "${app-dir}"/>
    </exec>

  </target>

  <!-- construct distribution disk image -->

  <target name = "dmg" 
          depends = "app" 
          description = "construct os x distribution disk image (mac only)">

    <!-- assemble disk image contents -->

    <mkdir dir = "${dmg-dir}"/>
    <exec executable = "rsync">
      <arg value = "-aE"/>
      <arg value = "${app-dir}"/>
      <arg value = "${dmg-dir}"/>
    </exec>
    <copy file = "${resources}/readme.txt" 
          todir = "${dmg-dir}"/>
    <copy file = "${resources}/gpl.txt" 
          todir = "${dmg-dir}"/>
    <copy file = "${icons}/${app-title}Disk.icns"
          tofile = "${dmg-dir}/.VolumeIcon.icns"/>
    <copy todir = "${dmg-dir}/samples/">
      <fileset dir = "${samples}"/>
    </copy>

    <!-- build and attach temporary disk image -->

    <exec executable = "hdiutil">
      <arg value = "create"/>
      <arg value = "-srcdir"/>
      <arg value = "${dmg-dir}"/>
      <arg value = "-ov"/>
      <arg value = "-volname"/>
      <arg value = "${dmg-vol-name}"/>
      <arg value = "-format"/>
      <arg value = "UDRW"/>
      <arg value = "-attach"/>
      <arg value = "tmp-${dmg-name}"/>
    </exec>

    <!-- activate custom volume icon -->

    <exec executable = "/Developer/Tools/SetFile">
      <arg value = "-a"/>
      <arg value = "C"/>
      <arg value = "/Volumes/${dmg-vol-name}"/>
    </exec>

    <!-- detach temporary disk image -->

    <exec executable = "hdiutil">
      <arg value = "detach"/>
      <arg value = "/Volumes/${dmg-vol-name}"/>
    </exec>

    <!-- convert temporary disk image to compressed final disk image -->

    <exec executable = "hdiutil">
      <arg value = "convert"/>
      <arg value = "tmp-${dmg-name}"/>
      <arg value = "-format"/>
      <arg value = "UDZO"/>
      <arg value = "-o"/>
      <arg value = "${dmg-name}"/>
      <arg value = "-ov"/>
    </exec>

    <!-- delete temporary disk image -->

    <delete file = "tmp-${dmg-name}"/>
  </target>

  <!-- construct distribution zip file -->

  <target name = "zip" 
          depends = "jar"
          description = "construct distribution zip file&#10;">

    <!-- collect zip image contents -->

    <mkdir dir = "${zip-dir}"/>
    <copy file = "${jar-name}" 
          todir = "${zip-dir}"/>
    <copy file = "${resources}/readme.txt"
          todir = "${zip-dir}"/>
    <copy file = "${resources}/gpl.txt"
          todir = "${zip-dir}"/>
    <copy todir = "${zip-dir}/samples/">
      <fileset dir = "${samples}"/>
    </copy>

    <!-- remove old zip file to be sure no old cruft is laying about -->

    <delete file = "${zip-name}"/>

    <!-- rename zip directory so it produces a nice zip file -->

    <move file="${zip-dir}" tofile="${app-name}"/>

    <!-- build zip -->

    <exec executable = "zip">
      <arg value = "-r"/>
      <arg value = "${zip-name}"/>
      <arg value = "${app-name}"/>
    </exec>

    <!-- restore directory name -->

    <move file = "${app-name}"
          tofile = "${zip-dir}"/>

  </target>

  <!-- construct a build environment directory -->

  <target name = "build-env-dir"
          depends = "clean"
          description = "construct CLEANed build environment directory">

    <!-- assemble build environment contents -->

    <mkdir dir = "${build-env-dir}/${app-name}"/>
    <exec executable = "rsync">
      <arg value = "-aE"/>
      <arg value = "--exclude"/>
      <arg value = "${build-env-dir}"/>
      <arg value = "."/>
      <arg value = "${build-env-dir}/${app-name}"/>
    </exec>

  </target>

  <!-- construct a build environment zip file -->

  <target name = "build-env-zip"
          depends = "build-env-dir"
          description = "make a build environment zip file">

    <!-- build zip build environment -->

    <exec executable = "zip" dir = "${build-env-dir}">
      <arg value = "-r"/>
      <arg value = "../${build-env-zip}"/>
      <arg value = "${app-name}"/>
    </exec>

  </target>

  <!-- construct a build environment disk image -->

  <target name = "build-env-dmg"
          depends = "build-env-dir"
          description = "make a build environment disk image">

    <!-- set te volume icon for the build enviroment disk image -->

    <copy file = "${icons}/${app-title}Disk - environment.icns"
          tofile = "${build-env-dir}/.VolumeIcon.icns"/>

    <!-- build temporary disk image -->

    <exec executable = "hdiutil">
      <arg value = "create"/>
      <arg value = "-srcdir"/>
      <arg value = "${build-env-dir}"/>
      <arg value = "-ov"/>
      <arg value = "-volname"/>
      <arg value = "${build-env-vol-name}"/>
      <arg value = "-format"/>
      <arg value = "UDRW"/>
      <arg value = "tmp-${build-env-dmg}"/>
      <arg value = "-attach"/>
    </exec>

    <!-- activate custom volume icon -->

    <exec executable = "/Developer/Tools/SetFile">
      <arg value = "-a"/>
      <arg value = "C"/>
      <arg value = "/Volumes/${build-env-vol-name}"/>
    </exec>

    <!-- detach temporary disk image -->

    <exec executable = "hdiutil">
      <arg value = "detach"/>
      <arg value = "/Volumes/${build-env-vol-name}"/>
    </exec>

    <!-- convert temporary disk image to compressed final disk image -->

    <exec executable = "hdiutil">
      <arg value = "convert"/>
      <arg value = "tmp-${build-env-dmg}"/>
      <arg value = "-format"/>
      <arg value = "UDZO"/>
      <arg value = "-o"/>
      <arg value = "${build-env-dmg}"/>
      <arg value = "-ov"/>
    </exec>

    <!-- delete temporary disk image -->

    <delete file = "tmp-${build-env-dmg}"/>
  </target>


  <!-- construct all build environments packages -->

  <target name = "build-env"
          depends = "build-env-zip, build-env-dmg"
          description = "make all build environment packages"/>

  <!-- build all distribtions -->

  <target name = "distro" depends = "build-env, zip, dmg"
          description = "build all distributions">
  </target>

  <!-- push distributions to trebor.org staging area -->

  <target name = "push" depends = "distro, doc"
          description = "push distributions to trebor.org staging area">
    <copy file = "${dmg-name}"
          todir = "../${domain}/${app-name}/"/>
    <copy file = "${zip-name}"
          todir = "../${domain}/${app-name}/"/>
    <copy file = "${build-env-dmg}"
          todir = "../${domain}/${app-name}/"/>
    <copy file = "${build-env-zip}"
          todir = "../${domain}/${app-name}/"/>
    <copy todir = "../${domain}/${app-name}/${doc-dir}">
      <fileset dir = "${doc-dir}"/>
    </copy>

  </target>

  <!-- build everything -->

  <target name = "everything" depends = "distro, doc"
          description = "build everything"/>

</project>
